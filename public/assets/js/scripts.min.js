'use strict';

function closeAlert($container) {

	console.log($container);
	
	var delay = $container.length ? $container.closest('.alert-container').attr('data-delay'):null;
	
	if (!delay || !$.isNumeric(delay)) {
		delay = 10000;
	}

	if (delay == 0) {

		$container.remove();

	} else {
	
		setTimeout(function() {
	
			if ($container.length > 0) {
				
				$container.removeClass('fadeOutUp').addClass('fadeInDown');
				$container.remove();

			}
	
		}, delay);
	
	}
}

var $alert;

function getAlertContent(type, message) {
	
	var icons = {
		success: 'fa fa-check',
		info: 'fa fa-info',
		error: 'fa fa-times',
		warning: 'fa fa-warning'
	}
	
	var alertClass = {
		success: 'alert-success',
		info: 'alert-info',
		error: 'alert-danger',
		warning: 'alert-warning'
	}
	
	var html = 
	'<div class="alert animated fadeInDown">'+
		'<span class="icon"><i aria-hidden="true"></i></span>'+
		'<span class="message"></span>'+
		'<button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>'+
	'</div>';
		
	var $elem = $(html);
	$elem.addClass(alertClass[type]);
	$elem.find("i").addClass(icons[type]);
	$elem.find(".message").html(message);
	
	return $elem;
}

$.fn.alert = function(type, message) {
	
	var $elem = getAlertContent(type, message);
	
	closeAlert($elem);
	$(this).append($elem);
	
};

(function() {

	$('.alert').each(function() {
		
		$(this).on('DOMSubtreeModified', function() {
			
			if ($(this).find('.close').length > 0) {
				closeAlert($(this).find('.alert.animated'));
			}
				
		});
	});
	
	// on click in button class close 
	$('.alert').on('click', '.close', function() {

		$(this.closest('.alert')).remove();
		
		// var $alertContainer = $(this).closest('.alert-container');
		// $alertContainer.attr('data-delay', 0);
		// closeAlert($(this).closest('.alert.animated'));
		// $alertContainer.attr('data-delay', 5000);

	});
	
	var toggle = function(type, message, controlSpam) {
		
		var $container = $('.alert-container');
		var $activeAlerts = $container.find(".alert.animated");
		
		if ($activeAlerts.length == 0) {
			var $elem = getAlertContent(type, message);
			
			$container.append($elem);
			$(window).scrollTop(0);
			

		} else {
			
			// // trigger click on .close
			// $container.find('.close').trigger('click');

			var $elem = getAlertContent(type, message);
			
			$container.append($elem);
			$(window).scrollTop(0);

		}

	}
	
	$alert = {
			
		success: function(message, controlSpam) {
			toggle('success', message, controlSpam);
		},
		
		info: function(message, controlSpam) {
			toggle('info', message, controlSpam);
		},
		
		error: function(message, controlSpam) {
			toggle('error', message, controlSpam);
		},
		
		warning: function(message, controlSpam) {
			toggle('warning', message, controlSpam);
		}
	};
	
})();
// Toogle side modal
$('.open-side-nav').on('click', function () {
    $('.side-panel').css('width', '100%');
    $('.wrapper').css('margin-left', '250px');

});

$('.btn-side-close').on('click', function () {
    $('.side-panel').css('width', '0');
    $('.wrapper').css('margin-left', '0');
});

// Logout
$('.logout').on(`click`, function () {
    
    var $form = $('<form method="POST" action="' + window.Laravel.url + '/logout' + '" hidden><input name="_token" value="' + window.Laravel.csrfToken + '"></form>');
    $('body').append($form);
    $form.submit();
});

// Delete button
var deleteModalOpen = false;
$("body").on('click', '.btn-delete', function (e) {

    e.preventDefault();

    if (!deleteModalOpen) {

        deleteModalOpen = true;
        var id = $(this).attr('data-id');
        var action = $(this).attr('data-url');
        var question = $(this).attr('data-question');

        if (id !== undefined && action !== undefined) {

            question = question !== undefined && question != '' ? question : 'Essa é uma ação <b>irreversível</b>.<br/>Tem certeza que deseja continuar?';

            dialog.prompt(question, function (result) {

                deleteModalOpen = false;
                if (result == true) {
                    var $form = $('<form method="POST" class="d-none" action="' + action + '"><input name="_method" value="DELETE"/><input name="_token" value="' + window.Laravel.csrfToken + '"><input name="id" value="' + id + '"/></form>');
                    $('body').append($form);
                    $form.submit();
                }
            });
        }
    }
});

$(".select2-select-js").select2({

    // multiple: true,
    placeholder: 'Realize a pesquisa',
    language: {
        noResults: function () {
            return "Nenhum resultado foi encontrado"
        }
    }
});

/**
 * Bloquear o elemento (abrir loading)
 */
$.fn.wait = function (_class) {

	// var animatedSvg = `<img src='${window.Laravel.url}/assets/img/loading.svg' >`;
	var animatedSvg = `<object data="${window.Laravel.url}/assets/img/loading.svg" type="image/svg+xml"></object>`;

	_class = _class ? (' ' + _class) : '';

	$(this).find('.loader-container').remove();
	// $(this).append('<div class="loader-container' + _class + '"><div class="loader"></div></div>');
	$(this).append(`<div class="loader-container${_class}"><div class="loader">${animatedSvg}</div></div>`);
	$(this).addClass('loader-active');
}

/**
 * Desbloquear o elemento (remover loading)
 */
$.fn.closeWait = function () {

	var $self = $(this);
	''
	$(this).children(".loader-container").fadeOut(300, function () {
		$self.removeClass('loader-active');
		$(this).remove();
	});
};
'use-strict';
$(function () {

    $('.payable').each(function () {

        // walk tds and find data-hover
        var $td = $(this).find('td[data-hover]');
        var ctrl = 0;

        $($td).on('click', function() {
        
            var $this = $(this);

            if (ctrl == 0) {
                $this.append($("<span> ("+ $this.data('hover') +") </span>"));
                ctrl = 1;
            } else {
                $td.find('span').remove();
                ctrl = 0;
            }

        });

    });

    $('.payable-create-edit').each(function () {

        var isSubmiting = false;
        
        //Create edit
        var $target = $(this);
        var $mainAlertContainer = $target.find('.alert-container');

        // $mainAlertContainer.addClass('stand-by-alert-container');
        // $mainAlertContainer.removeClass('alert-container');

        /**
         * Realiza o load da lib de select's customizados
         */
        $target.find('select[name="category_id[]"]').each(function () {

            var $select = $(this);
            var parent = $select.data('parent') || null;
            var lastId = $select.data('lastid');

            bindNewNestedSelect($select, parent);

            if (parent && lastId == parent) {
                $(this).trigger('item-selected', lastId);
            }

        });

        // Carrega select no create edit
        $target.find('.select2-select-js').select2();

        /**
             * Submits the form to inser a  bill to pay
             */
        $target.find('.to-pay-form').on('submit', function (e) {

            // e.preventDefault();

            // if (isSubmiting == false) {

            //     isSubmiting = true;
            //     var $form = $(this);
            //     $form.wait();

            //     var url = $form.data('url');
            //     var id = $form.find('input[name="id"]').val();
            //     var $nestedSelects = $form.find('.nested-select');
                // var $actualSelect = $($nestedSelects[($nestedSelects.length - 2)]);

                // var fd = new FormData();
                // fd.append('_token', window.Laravel.csrfToken);
                // fd.append('_method', $form.find('input[name="_method"]').val());
                // fd.append('id', id);
                // fd.append('name', $form.find('input[name="name"]').val());
                // fd.append("type", $form.find('input[name="type"]').val());
                // fd.append("cost", $form.find('input[name="cost"]').val());
                // fd.append("due_date", $form.find('input[name="due_date"]').val());
                // fd.append("paid_date", $form.find('input[name="paid_date"]').val());
                // fd.append("paid_cost", $form.find('input[name="paid_cost"]').val());
                // fd.append("delay_cost", $form.find('input[name="delay_cost"]').val());
                // fd.append("description", $form.find('textarea[name="description"]').val());
                // fd.append("category_id", $actualSelect.find('select[name="category_id[]"]').val());

                // $form.submit();
                // $.ajax({
                //     type: "POST",
                //     url: url,
                //     data: fd,
                //     processData: false,
                //     contentType: false,
                //     success: function (result) {

                //         $('body').success(result);

                //         setTimeout(() => {
                //             $btn.trigger('modalside:close');
                //             isSubmiting = false;
                //             $form.closeWait();
                //         }, 2000);

                //     },
                //     error: function (err) {

                //         $('body').error(err.responseText);
                //         $form.closeWait();
                //         isSubmiting = false;
                //     }
                // });

                // // Realiza Scroll para o topo da pagina
                // $target.find('.modalside-content').animate({
                //     scrollTop: $target.offset().top
                // }, 300);

            // }

        });

        /**
         * Função responsável por retornar os filhos do nó informado
         * @param {*} node 
         * @returns 
         */
        function getNodes(parentId) {

            return new Promise(function (resolve) {

                if (parentId) {

                    var url = window.Laravel.url + '/payable/category/nodes';

                    $.get(url, { parent_id: parentId }, function (response) {
                        resolve(response);

                    }).fail(err => {
                        resolve(false);
                    });

                } else {
                    resolve(false);
                }

            });
        }

        /**
         * Adapta select para select custom e realiza o bind do mesmo
         * @param {*} $elem 
         * @param {*} id 
         */
        function bindNewNestedSelect($elem, id) {

            $elem.nestedSelect(id);

            $elem.on('item-selected', function (e, id) {

                clearRigthElms($elem); // Limpa lista de seletores a frente

                if (id) {

                    getNodes(id).then(children => {

                        var $selectorElm = insertNewSelect(children);
                        bindNewNestedSelect($selectorElm, id);

                    }).catch(err => {

                    });

                }

            });

        }

        /**
         * Insere um novo select
         * @param {*} children 
         * @returns 
         */
        function insertNewSelect(children) {

            var newSelect = selectFactory(children);
            $target.find('.selects-list').append(newSelect);

            return newSelect;

        }

        /**
         * Fabrica um novo seletor
         * @param {*} data 
         */
        function selectFactory(data) {

            var $selector = $(`<select 
                    name="category_id[]" 
                    data-url="${window.Laravel.url + '/payable/category'}" 
                    data-placeholder='Selecione uma categoria'>
                    <option value selected>Selecione</option>	
                </select>`);

            if (data.length) {

                var option = [];
                // Insere categorias filhas
                data.forEach(category => {

                    option.push(`<option value="${category.id}">${category.name}</option>`);

                });

            }

            $selector.find('option').after(option);


            return $selector;

        }

        /**
        * Limpa lista de seletores
        * @param {*} $ref 
        */
        function clearRigthElms($elem) {

            $elem.parent().nextAll('.nested-select').remove();

        }

    });

});

var dialog = {
		
	success : function(message) {
		return bootbox.alert({
			title: "<div class='dl-title dl-success'><div>Sucesso</div></div>",
			message: message
		});
	},
	
	warning : function(message) { 
		return bootbox.alert({
			title: "<div class='dl-title dl-warning'>Atenção!</div>",
			message: message
		});
	}, 
	
	prompt: function(message, callback, title, size) {
		return bootbox.confirm({
			title: title || "<div class='dl-title dl-warning'>Atenção!</div>",
			message: message,
			callback: callback,
			size: size || 'small',
			buttons: {
                confirm: {
                    label: "Ok",
                    className: "btn-primary"
                },
                cancel: {
                    label: "Cancelar",
                    className: "btn-light"
                }
			}
		});
	},
	
	message: function(title, message, buttons) {
		
		return bootbox.dialog({
            title: title,
            message: message,
            buttons: buttons
		});
	},
	
	closeAll: function() {
		bootbox.hideAll();
	}
}

'use-strict';

/**
 * Plugin de select customizado
 */
jQuery.fn.extend({

    nestedSelect: function (parentId) {

        // Referência do DOM
        var $self = null;
        var $select = $(this);

        // Referência do DOM criado dinamicamente
        var $selecorBlock = null;
        var $optionsBlock = null;

        // Informações do Seletor
        var placeholder = $select.data('placeholder');
        var url = $select.data('url');

        var myOptions = null;

        var modalIsOpen = false;

        if (!parentId) {
            parentId = null;
        }

        //Inicializa o plugin
        init();

        /**
         * Observa evento de clique do seletor
         */
        $self.on('click', '.selector-block', function () {
            toggleDropDown();
        });

        /**
         * Observa evento de clique do seletor
         */
        $self.on('click', '.drop-down-options .item .label', function () {

            var $this = $(this);
            var $li = $this.closest('li');

            selectItem($li.data('id'), $li.data('name'));
            closeDropdown($(this).closest('.nested-select'));

            //Dispara evento de seleção de item
            $select.trigger('item-selected', $li.data('id'));

        });

        /**
         * Fecha a edição atráves do trigger
         */
        $self.on('blur', '.drop-down-options .options-area ul li .edit input', function () {

            var $li = $(this).closest('li');

            if (isEdit($li)) {
                toggleEdit($li);
            } else {
                insert($(this));
            }

        }).on('keypress', '.drop-down-options .options-area ul li .edit input', function (event) {

            if (event.code == "NumpadEnter" || event.code == "Enter") {
                //Chamar a função de inserir ou banco ou editar

                event.preventDefault();
                // var $li = $(this).closest('li');

                // // Verificação para confirmar se é Edição ou Inserção
                // if (isEdit($li)) {
                //     // EDIÇÂO
                    $(this).trigger('blur');

                // } else {
                //     // INSERÇÂO
                //     insert($(this));
                // }

                return false;
            }

        });

        /**
         * Observa evento de clique do seletor
         */
        $self.on('keyup', '.drop-down-options .search-area input', function () {

            var searchKey = $(this).val();
            var $options = $select.find('option');
            var options = [];

            $options.each(function (i, opt) {

                var $opt = $(opt);
                var name = $opt.text();

                if (name.toLocaleLowerCase().indexOf(searchKey.toLocaleLowerCase()) > -1) {

                    options.push({
                        name: $opt.text(),
                        id: $opt.val() || null
                    });

                }

            });

            if (options) {

                var newUl = buildOptionsBlock(options).find('ul');
                $self.find('.options-area ul').detach();
                $self.find('.drop-down-options .options-area').append(newUl);
            }

        });

        /**
         * Observa evento de inserção de novo item
         */
        $self.on('click', '.drop-down-options .add-item', function () {

            var newData = {
                id: -1,
                name: ""
            };

            var newItem = buildItem(newData, true);
            $optionsBlock.find('ul').append(newItem);
            var $li = $optionsBlock.find(newItem);
            $li.find('.actions .update').trigger('click');

        });

        /**
         * Seleciona todo o conteudo dentro do input quando esse receber o foco
         */
        $self.on('focus', ".drop-down-options .options-area .edit input[type='text']", function () {
            $(this).select();
        });

        /**
                 * Edita um elemento
                 * @param {*} id
                 * @param {*} $item
                 */
        function toggleEdit($li) {

            var $editBlock = $(`
            <div class='edit hide'>
                 <input maxlength="50" type='text' value='${$li.data('name')}'>
            </div>`);

            var $input = $li.find('.edit input') || $editBlock.find('input');
            var $label = $li.find('.label');

            //Habilita edição do item atual
            var enableEdit = () => {

                $li.addClass('is-editing');
                $li.prepend($editBlock);

                $label.addClass('hide');
                $editBlock.removeClass('hide');

                $editBlock.find('input').trigger('focus');

            };

            //Desabilita edição do item atual
            var disableEdit = () => {

                $li.removeClass('is-editing');

                $label.removeClass('hide');
                $editBlock.addClass('hide');
                $li.find('.edit').detach();
            };

            if (!$li.hasClass('is-editing')) {

                enableEdit();

            } else {

                if ($input.val() && $li.data('name') != $input.val()) {

                    $li.wait();

                    $.ajax({
                        url: url,
                        method: 'put',
                        data: {
                            _token: window.Laravel.csrfToken,
                            name: $input.val(),
                            id: $li.data('id')
                        }

                    }).done((response) => {

                        $label.text($input.val());
                        $li.data('name', $input.val());

                        $select.find(`option[value="${response.id}"`).text($input.val());

                        disableEdit();

                        $li.closeWait();

                    }).catch((err) => {
                        disableEdit();
                        $alert.error(err.responseText);
                        $li.closeWait();
                    });

                } else {
                    disableEdit();
                }

            }

        }

        /**
         * Observa evento de clique na edição
         */
        $self.on('click', '.drop-down-options .item .actions .update', function (e) {

            var $li = $(this).closest('li');

            toggleEdit($li);
            $li.find('.edit input').trigger('click');

        });

        /**
         * Observa o click na opção para remoção do elemento
         */
        $self.on('click', '.drop-down-options .item .actions .remove', function () {

            if (!modalIsOpen) {

                modalIsOpen = true;

                var $this = $(this);
                var $li = $this.closest('li');
                var id = $li.data('id');

                // Verifica se o dado possui id
                if (id && id > 0) {

                    var question = 'Essa é uma ação <b>irreversível</b>.<br/>Tem certeza que deseja continuar?';

                    dialog.prompt(question, function (result) {

                        if (result == true) {

                            categoryDelete(id).then((result) => {
                                
                                $alert.success(result);

                                $select.find('option').each((index, opt) => {

                                    var $opt = $(opt);
                                    if ($opt.val() == id) {
                                        $opt.detach();
                                    } else if (!$opt.val()) {
                                        $opt.attr('selected', true);
                                    }

                                });

                                $selecorBlock.find('.label').html(placeholder);
                                $select.parent().nextAll('.nested-select').remove();
                                toggleDropDown();
                                $li.detach();

                            }).catch((err) => {
                                console.log('AQUII');
                                console.log($alert);
                                $alert.error(err);
                            });

                            $self.closest('.modalside-content').animate({
                                scrollTop: $self.closest('.modalside-content').offset()
                            }, 300);
                        }
                    });

                } else {
                    // Caso não haja id o elemento foi removido ou ele ainda não foi inserido no banco
                    $li.detach();
                }

                modalIsOpen = false;

            }

        });

        function init() {

            myOptions = loadOptions(); // Armazena opções inseridas no seletor

            $selecorBlock = buildSelectorBlock(placeholder);
            $optionsBlock = buildOptionsBlock(myOptions);

            var $nestedSelect = $(`<div class="nested-select"></div>`);
            $select.wrap($nestedSelect);

            $self = $select.parent();
            $self.append($selecorBlock, $optionsBlock);

        }

        /**
         * Seleciona um determinado item
         * @param {*} value
         * @param {*} text
         */
        function selectItem(value, text) {

            $select.find('option').each((index, opt) => {

                var $opt = $(opt);

                if ($opt.val() == value) {
                    $opt.attr('selected', true);
                } else {
                    $opt.attr('selected', false);
                }
            });

            // Altera valor atual do seletor

            if (!value) {

                if (placeholder) {
                    $selecorBlock.find('.label').html($select.data('placeholder'));
                }

            } else {
                $selecorBlock.find('.label').text(text);
            }

        }

        /**
         * Apresenta ou esconde bloco drop down
         *
         * @param {*} open
         */
        function toggleDropDown() {

            if (!$self.hasClass('opened')) {

                $self.parent().find('.nested-select').each(function () {
                    closeDropdown($(this));
                });

                $self.addClass('opened');

            } else {
                closeDropdown($self);
            }
        }

        /**
         * Fecha o dropdown
         * @param {*} $elem
         */
        function closeDropdown($elem) {

            $elem.find('.search-area input').val('');
            $elem.removeClass('opened');
        }

        /**
         * Cria elemento html para o seletor
         *
         * @param {*} placeHolder
         * @returns
         */
        function buildSelectorBlock(placeHolder) {

            var selectorBlock = $(`
                <div class="selector-block">
                    <div class='label'>${placeHolder}</div>
                    <div class='icon'>
                        <i class="fa fa-caret-down closed" aria-hidden="true"></i>
                        <i class="fa fa-caret-up opened" aria-hidden="true"></i>
                    </div>
                </div>
            `);

            return selectorBlock;
        }

        /**
         * Cria elemento html para opções drop down
         *
         * @param {*} options
         * @returns
         */
        function buildOptionsBlock(options) {

            var $optionsBlock = $(`
                <div class='drop-down-options'>
                    <div class='search-area'>
                        <input maxlength="50" type='text' class="form-control" placholder='Pesquisar'>
                    </div>
                    <div class="options-area">
                        <ul></ul>
                    </div>
                </div>
            `);

            options.forEach(opt => {

                var withActions = false;

                // Verifica se item possui menu de ações
                if (opt.id) {
                    withActions = true;
                }

                var li = buildItem(opt, withActions);
                $optionsBlock.find('ul').append(li);
            });

            $optionsBlock.append(`
                <div class='add-item'>
                    <i class="fa fa-plus" aria-hidden="true"></i>
                    <div class='label'>
                        Adicionar novo item
                    </div>
                </div>
            `);

            return $optionsBlock;

        }

        /**
         * Cria um novo item option
         *
         * @param {*} item
         * @returns
         */
        function buildItem(item) {

            var li = $(`
            <li class='item' data-id='${item.id}' data-name='${item.name}'>
                <div class='label'>
                    ${item.name}
                </div>
            </li>`);

            // Verifica se item possui menu de ações
            if (item.id) {

                var actions = `
                <div class='actions'>
                    <i class="fa fa-pencil update" aria-hidden="true"></i>
                    <i class="fa fa-trash remove" aria-hidden="true"></i>
                </div>`;

                li.append(actions);
            }

            return li;
        }

        /**
         * Carrega lista de itens inseridos no seletor
         * @returns
         */
        function loadOptions() {

            var $options = $select.find('option');
            var options = [];

            $options.each(function (i, opt) {

                var $opt = $(opt);

                if ($opt.attr('selected')) {
                    placeholder = $opt.text();
                }

                options.push({
                    name: $opt.text(),
                    id: $opt.val() || null
                });

            });

            return options;
        }

        /**
                 * Insere uma nova categoria
                 * @param {*} data
                 * @param {*} parent
                 * @returns
                 */
        function insertCategory(data, parent) {

            return new Promise(function (resolve, reject) {

                if (data) {

                    $.ajax({
                        url: url,
                        method: 'post',
                        data: {
                            _token: window.Laravel.csrfToken,
                            name: data,
                            parent_id: parent
                        }

                    }).done((response) => {

                        resolve(response);
                    }).catch((err) => {

                        reject(err);
                    });

                } else {
                    reject('Dados inválidos');
                }

            });
        }

        /**
         * Insere elemento na lista após a chamada de criação de nova categoria
         * @param {*} $input
         */
        function insert($input) {

            var data = $input.val().trim();
            var $li = $input.closest('li');
            var $label = $li.find('.label');

            // Verifica se foi escrito algo no input caso sim inserta o elemento caso não.. remove o mesmo da lista
            if (data) {

                $li.wait();

                insertCategory(data, parentId).then((response) => {

                    $li.attr('data-id', response.id);
                    $li.attr('data-name', response.name);
                    $li.data('id', response.id);
                    $li.data('name', response.name);
                    $li.removeClass('is-editing');

                    $label.text(response.name);
                    $label.removeClass('hide');
                    $li.find('.edit').detach();
                    $select.append($(`<option value="${response.id}">${response.name}</option>`));
                    $li.closeWait();

                }).catch((err) => {

                    $li.closeWait();
                });

            } else {
                $li.detach();
            }

        }

        /**
         * Verifica se está inserindo ou editando um determinado dado
         * @param {*} $li
         */
        function isEdit($li) {

            var id = $li.data('id');

            if (id && id > 0) {
                return true;
            } else {
                return false;
            }

        }

        /**
                 * Função responsável por fazer o ajax e deletar a categoria informada
                 * @param {*} id
                 * @returns
                 */
        function categoryDelete(id) {

            return new Promise(function (resolve, reject) {

                $.ajax({
                    url: url,
                    method: 'delete',
                    data: {
                        _token: window.Laravel.csrfToken,
                        id: id
                    }

                }).done((item) => {
                    resolve(item);
                }).catch((err) => {
                    reject(err.responseText);
                });


            });

        }

    }

});

//Tabelas
$('.table.table-ordered tr th[data-column]').on(`click`, function () {

    var column = $(this).attr('data-column');

    if (column != undefined && column != '') {

        var params = urlParams();

        if (params['column'] == column) {
            params['sort'] = params['sort'] == 'asc' ? 'desc' : 'asc';
        } else {
            params['column'] = column;
            params['sort'] = 'asc';
        }

        var query = [];
        $.each(params, function (k, v) {
            query.push(k + '=' + v);
        });

        var location = window.location;
        var url = location.origin + location.pathname + '?' + query.join('&');

        document.location = url;
    }

}).each(function () {

    var params = urlParams();

    if (params['column'] !== undefined && $(this).attr('data-column') !== undefined && params['column'] == $(this).attr('data-column')) {

        $(this).closest('.table').find('tr th[data-column]').removeAttr('data-ordered');
        $(this).attr('data-ordered', params['sort']);
    }
});

$('.table-area .table-footer [name=row_limit]').on(`change`, function () {

    var rowLimit = $(this).val();
    var $formFilter = $('.table-area form[name=form-filter]');

    $formFilter.find('[name=row_limit]').val(rowLimit);
    $formFilter.submit();

});

/**
 * Obtêm os parâmetros da url
 * @returns
 */
function urlParams() {

	var result = {};
	var tmp = [];

	location.search.substr(1).split("&").forEach(function (item) {

		if (item) {
			tmp = item.split("=");
			result[tmp[0]] = decodeURIComponent(tmp[1]);
		}

	});

	return result;
}